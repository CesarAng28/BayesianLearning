"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSnippetHtml = exports.SnippetView = void 0;
const React = __importStar(require("react"));
const dompurify_1 = __importDefault(require("dompurify"));
const MarkdownRenderer_1 = require("../MarkdownRenderer");
class SnippetView extends React.Component {
    render() {
        return (React.createElement("div", { className: this.props.containerClassName },
            React.createElement("div", { className: this.props.contentClassName, dangerouslySetInnerHTML: {
                    __html: dompurify_1.default.sanitize(this.props.snippet),
                } })));
    }
}
exports.SnippetView = SnippetView;
async function getSnippetHtml(snippets, grammarName, renderer) {
    if (snippets !== undefined && snippets.length > 0) {
        const regExpLSPPrefix = /^\((method|property|parameter|alias)\)\W/;
        const divElem = document.createElement("div");
        snippets.forEach((snippet) => {
            const preElem = document.createElement("pre");
            const codeElem = document.createElement("code");
            snippet = snippet.replace(/^\s*<(\?|!)([a-zA-Z]+)?\s*/i, "");
            codeElem.innerText = snippet.replace(regExpLSPPrefix, "");
            preElem.appendChild(codeElem);
            divElem.appendChild(preElem);
        });
        if (renderer) {
            return renderer.render(divElem.outerHTML, grammarName);
        }
        else {
            const render = await MarkdownRenderer_1.getMarkdownRenderer();
            return render(divElem.outerHTML, grammarName);
        }
    }
    return null;
}
exports.getSnippetHtml = getSnippetHtml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU25pcHBldFZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMtY29tbW9ucy11aS9mbG9hdC1wYW5lL1NuaXBwZXRWaWV3LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkNBQThCO0FBQzlCLDBEQUFpQztBQUVqQywwREFBeUQ7QUFhekQsTUFBYSxXQUFZLFNBQVEsS0FBSyxDQUFDLFNBQXVCO0lBQzVELE1BQU07UUFDSixPQUFPLENBQ0wsNkJBQUssU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCO1lBQzNDLDZCQUNFLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUN0Qyx1QkFBdUIsRUFBRTtvQkFDdkIsTUFBTSxFQUFFLG1CQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO2lCQUMvQyxHQUNELENBQ0UsQ0FDUCxDQUFBO0lBQ0gsQ0FBQztDQUNGO0FBYkQsa0NBYUM7QUFTTSxLQUFLLFVBQVUsY0FBYyxDQUNsQyxRQUF1QixFQUN2QixXQUFtQixFQUNuQixRQUEwQjtJQUUxQixJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDakQsTUFBTSxlQUFlLEdBQUcsMENBQTBDLENBQUE7UUFDbEUsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUM3QyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDM0IsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUM3QyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQy9DLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLDZCQUE2QixFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBQzVELFFBQVEsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUE7WUFDekQsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUM3QixPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzlCLENBQUMsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQTtTQUN2RDthQUFNO1lBRUwsTUFBTSxNQUFNLEdBQUcsTUFBTSxzQ0FBbUIsRUFBRSxDQUFBO1lBQzFDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUE7U0FDOUM7S0FDRjtJQUNELE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQztBQXpCRCx3Q0F5QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxyXG5pbXBvcnQgRE9NUHVyaWZ5IGZyb20gXCJkb21wdXJpZnlcIlxyXG5pbXBvcnQgeyBNYXJrZG93blNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vdHlwZXMtcGFja2FnZXMvbWFpblwiXHJcbmltcG9ydCB7IGdldE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tIFwiLi4vTWFya2Rvd25SZW5kZXJlclwiXHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHNuaXBwZXQ6IHN0cmluZ1xyXG4gIGNvbnRhaW5lckNsYXNzTmFtZTogc3RyaW5nXHJcbiAgY29udGVudENsYXNzTmFtZTogc3RyaW5nXHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7fVxyXG5cclxuLyoqXHJcbiAqIEEgUmVhY3QgY29tcG9uZW50IHRoYXQgaG9zdHMgYSBjb2RlIHNuaXBwZXQgd2l0aCBzeW50YXggaGlnaGxpZ2h0aW5nXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU25pcHBldFZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9e3RoaXMucHJvcHMuY29udGFpbmVyQ2xhc3NOYW1lfT5cclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICBjbGFzc05hbWU9e3RoaXMucHJvcHMuY29udGVudENsYXNzTmFtZX1cclxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XHJcbiAgICAgICAgICAgIF9faHRtbDogRE9NUHVyaWZ5LnNhbml0aXplKHRoaXMucHJvcHMuc25pcHBldCksXHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIGNvbnZlcnRzIGEgZ2l2ZW4gY29kZSBzbmlwcGV0IGludG8gc3ludGF4IGZvcm1hdHRlZCBIVE1MXHJcbiAqIEBwYXJhbSBzbmlwcGV0cyB0aGUgY29kZSBzbmlwcGV0IHRvIGJlIGNvbnZlcnRlZFxyXG4gKiBAcGFyYW0gZ3JhbW1hck5hbWUgdGhlIG5hbWUgb2YgdGhlIGdyYW1tYXIgdG8gYmUgdXNlZCBmb3Igc3ludGF4IGhpZ2hsaWdodGluZ1xyXG4gKiBAcGFyYW0gcmVuZGVyZXIgbWFya2Rvd24gc2VydmljZSB0byBiZSB1c2VkIGZvciByZW5kZXJpbmdcclxuICogQHJldHVybiBhIHByb21pc2Ugb2JqZWN0IHRvIHRyYWNrIHRoZSBhc3luY2hyb25vdXMgb3BlcmF0aW9uXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U25pcHBldEh0bWwoXHJcbiAgc25pcHBldHM6IEFycmF5PFN0cmluZz4sXHJcbiAgZ3JhbW1hck5hbWU6IHN0cmluZyxcclxuICByZW5kZXJlcj86IE1hcmtkb3duU2VydmljZVxyXG4pOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcclxuICBpZiAoc25pcHBldHMgIT09IHVuZGVmaW5lZCAmJiBzbmlwcGV0cy5sZW5ndGggPiAwKSB7XHJcbiAgICBjb25zdCByZWdFeHBMU1BQcmVmaXggPSAvXlxcKChtZXRob2R8cHJvcGVydHl8cGFyYW1ldGVyfGFsaWFzKVxcKVxcVy9cclxuICAgIGNvbnN0IGRpdkVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXHJcbiAgICBzbmlwcGV0cy5mb3JFYWNoKChzbmlwcGV0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHByZUVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicHJlXCIpXHJcbiAgICAgIGNvbnN0IGNvZGVFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNvZGVcIilcclxuICAgICAgc25pcHBldCA9IHNuaXBwZXQucmVwbGFjZSgvXlxccyo8KFxcP3whKShbYS16QS1aXSspP1xccyovaSwgXCJcIikgLy8gcmVtb3ZlIGFueSBwcmVhbWJsZSBmcm9tIHRoZSBsaW5lXHJcbiAgICAgIGNvZGVFbGVtLmlubmVyVGV4dCA9IHNuaXBwZXQucmVwbGFjZShyZWdFeHBMU1BQcmVmaXgsIFwiXCIpXHJcbiAgICAgIHByZUVsZW0uYXBwZW5kQ2hpbGQoY29kZUVsZW0pXHJcbiAgICAgIGRpdkVsZW0uYXBwZW5kQ2hpbGQocHJlRWxlbSlcclxuICAgIH0pXHJcbiAgICBpZiAocmVuZGVyZXIpIHtcclxuICAgICAgcmV0dXJuIHJlbmRlcmVyLnJlbmRlcihkaXZFbGVtLm91dGVySFRNTCwgZ3JhbW1hck5hbWUpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBVc2UgYnVpbHQtaW4gbWFya2Rvd24gcmVuZGVyZXIgd2hlbiB0aGUgbWFya2Rvd24gc2VydmljZSBpcyBub3QgYXZhaWxhYmxlXHJcbiAgICAgIGNvbnN0IHJlbmRlciA9IGF3YWl0IGdldE1hcmtkb3duUmVuZGVyZXIoKVxyXG4gICAgICByZXR1cm4gcmVuZGVyKGRpdkVsZW0ub3V0ZXJIVE1MLCBncmFtbWFyTmFtZSlcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG51bGxcclxufVxyXG4iXX0=