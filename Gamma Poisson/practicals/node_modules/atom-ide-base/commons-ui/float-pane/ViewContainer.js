"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewContainer = exports.DATATIP_ACTIONS = void 0;
const HTMLView_1 = require("./HTMLView");
const SnippetView_1 = require("./SnippetView");
const ReactView_1 = require("./ReactView");
const React = __importStar(require("react"));
const react_dom_1 = __importDefault(require("react-dom"));
exports.DATATIP_ACTIONS = Object.freeze({
    PIN: "PIN",
    CLOSE: "CLOSE",
});
const IconsForAction = {
    [exports.DATATIP_ACTIONS.PIN]: "pin",
    [exports.DATATIP_ACTIONS.CLOSE]: "x",
};
class ViewContainer extends React.Component {
    constructor(props) {
        super(props);
        this.children = [];
        this.updateChildren();
        this.rootElement = document.createElement("div");
        const glowClass = atom.config.get("atom-ide-datatip.glowOnHover") ? "datatip-glow" : "";
        this.classNames = `${String(props.className)} datatip-element ${glowClass}`;
    }
    render() {
        this.actionButton = this.ActionClick(this.props.action, this.props.actionTitle);
        return (React.createElement("div", Object.assign({ className: this.classNames }, this.props.onMouseDown, this.props.onClickCapture),
            this.children,
            this.actionButton));
    }
    get element() {
        return react_dom_1.default.render(this.render(), this.rootElement);
    }
    updateChildren() {
        if (this.props.component) {
            const { element, containerClassName, contentClassName } = this.props.component;
            this.children.push(React.createElement(ReactView_1.ReactView, { component: element, containerClassName: containerClassName, contentClassName: contentClassName }));
        }
        if (this.props.snippet) {
            const { element, containerClassName, contentClassName } = this.props.snippet;
            this.children.push(React.createElement(SnippetView_1.SnippetView, { snippet: element, containerClassName: containerClassName, contentClassName: contentClassName }));
        }
        if (this.props.html) {
            const { element, containerClassName, contentClassName } = this.props.html;
            this.children.push(React.createElement(HTMLView_1.HTMLView, { html: element, containerClassName: containerClassName, contentClassName: contentClassName }));
        }
    }
    ActionClick(action, actionTitle) {
        let actionButton = undefined;
        if (action != null && IconsForAction[action] != null) {
            const actionIcon = IconsForAction[action];
            actionButton = (React.createElement("div", { className: `datatip-pin-button icon-${actionIcon}`, onClick: (event) => {
                    this.props.onActionClick();
                }, title: actionTitle }));
        }
        return actionButton;
    }
    async destroy() {
        return;
    }
}
exports.ViewContainer = ViewContainer;
//# sourceMappingURL=data:application/json;base64,